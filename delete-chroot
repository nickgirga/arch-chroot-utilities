#!/usr/bin/env python
# File: delete-chroot
# Author: Nicholas Girga
# Purpose: Delete a filesystem created by `create-chroot`.


# Imports
import depchecker.depchecker as depchecker
import getpass, os, subprocess, sys


# The path to the filesystem to delete.
path = ""


verbose = False


# Prints help text.
def print_help():
    print("\nUsage: `delete-chroot [options...] [path]`")
    print("\nOptions [options...]:")
    print("  -h, --help\t\tPrints help text.")
    print("  -v, --verbose\t\tEnables verbose mode.")
    print("\nIf [path] is left empty, `$PWD/arch-fs` will be used as the path.\n")


# Prints version text.
def print_version():
    print("\nArch Chroot Utilities (delete-chroot)")
    print("by Nicholas Girga")
    print("Released under the MIT license with ABSOLUTELY NO WARRANTY")
    print("\nVersion 1.1\n")


# Check launch options.
args = sys.argv[1:]
for arg in args:
    if not path == "":
        print(  "ERROR!: Invalid syntax (" + arg + ")!\n" +
                "Options must come before path.\n" +
                "Use `delete-chroot --help` for more information.", ' ', '\n', file = sys.stderr)
        sys.exit(8) # path before arguments; exit with code 8

    if len(arg) > 0:
        if arg[0] == '-':
            # is an option
            if len(arg) > 1:
                if arg[1] == '-':
                    # is double dash (word) option (e.g. `--help`)
                    if arg == "--help":
                        print_help() # help
                        sys.exit(0)
                    elif arg == "--verbose":
                        print(  "WARNING!: Verbose mode is enabled!\n" +
                                "Extra information will be given.")
                        verbose = True # enable verbose mode
                    elif arg == "--version":
                        print_version()
                        sys.exit(0)
                    else:
                        print(  "ERROR!: Invalid option (" + arg + ")!\n" +
                                "Use `delete-chroot --help` for more information.", ' ', '\n', file = sys.stderr)
                        sys.exit(9) # invalid option; exit with code 9
                else:
                    # is a single dash/char option (e.g. `-v`)
                    for char in arg[1:]:
                        if char == 'h':
                            print_help() # help
                            sys.exit(0)
                        elif char == 'v':
                            print(  "WARNING!: Verbose mode is enabled!\n" +
                                    "Extra information will be given.")
                            verbose = True # enable verbose mode
                        else:
                            print(  "ERROR!: Invalid option (-" + char + ")!\n" +
                                    "Use `delete-chroot --help` for more information.", ' ', '\n', file = sys.stderr)
                            sys.exit(9) # invalid option; exit with code 9
            else:
                print(  "ERROR!: Invalid syntax (" + arg + ")!\n" +
                        "Use `delete-chroot --help` for more information.", ' ', '\n', file = sys.stderr)
                sys.exit(10) # invalid syntax (-); exit with code 10
        else:
            # is a path
            path = arg
    else:
        print("ERROR!: Option has invalid character length (" + arg + ")!", ' ', '\n', file = sys.stderr)
        sys.exit(10) # invalid launch option character length; exit with code 10


# Check for script dependencies.
depchecker.check_dependencies({
    "mountpoint": { depchecker.SystemInfo.DEFAULT: "util-linux" },  # check for `mountpoint`
    "sudo": { depchecker.SystemInfo.DEFAULT: "sudo" }               # check for `sudo`
}, verbose)


# Set default path if needed.
if path == "":
    new_path = os.path.realpath(os.getcwd() + "/arch-fs")
    if verbose:
        print("WARNING!: No path specified! Using default path (" + new_path + ")!")
    path = new_path
else:
    path = os.path.realpath(path) # get full path


response = input("Are you sure you want to delete \"" + path + "\" and its children? [y/N] > ")
if response.lower() != 'y':
    print("(No) Quitting...")
    sys.exit(0) # user requested exit
else:
    print("(Yes) Proceeding...")


# Do not allow user to delete mounted directories.
if subprocess.run(["mountpoint", "-q", path], capture_output = not verbose).returncode == 0:
    print(  "ERROR!: Filesystem is mounted!\n" +
            "If you are positive it is no longer in use, unmount it using `umount`.\n" +
            "Use `umount --help` or `man umount` for more information.", ' ', '\n', file = sys.stderr)
    sys.exit(1) # filesystem mounted; exit with code 1


# Delete lock file.
lock_file = path + ".lock"
lock_file_existed = False
if os.path.isfile(lock_file):
    lock_file_existed = True

    if verbose:
        print("Deleting lock file (" + lock_file + ")...")

    lock_file_rm_cmd = ["rm", "-f", lock_file]
    if not getpass.getuser() == "root":
        lock_file_rm_cmd.insert(0, "sudo") # elevate privileges if needed

    try:
        subprocess.run(lock_file_rm_cmd, capture_output = not verbose)
    except Exception as e:
        print(  str(e) + "\nERROR!: Something happened while trying to delete the lock file (" + lock_file + ")!\n" +
                "Try using the `-v` option for more information.", ' ', '\n', file = sys.stderr)
        sys.exit(2) # lock file deletion interrupted; exit with code 2

    if verbose:
        print("Finished deleting lock file (" + lock_file + ")!")


# Ensure lock file was deleted.
if lock_file_existed and os.path.isfile(lock_file):
    print(  "ERROR!: Failed to delete the lock file (" + lock_file + ")!\n" +
            "Try manually deleting the file using `rm`.\n" +
            "Use `rm --help` or `man rm` for more information.", ' ', '\n', file = sys.stderr)
    sys.exit(3) # failed to delete lock file; exit with code 2


# Delete chroot filesystem.
if not os.path.isdir(path):
    print("ERROR!: The root filesystem for the Arch Linux chroot does not exist at the path (" + path + ")!")
    sys.exit(4) # filesystem does not exist; exit with code 4
else:
    listdir_results = os.listdir(path)
    child_index = 0
    for child in listdir_results:
        if not verbose:
            os.system("clear")

        print("Deleting Arch Linux chroot filesystem (" + path + ")... [" + str(child_index) + "/" + str(len(listdir_results)) + "]")

        filesystem_rm_cmd = ["rm", "-rf", path + "/" + child]
        if not getpass.getuser() == "root":
            filesystem_rm_cmd.insert(0, "sudo") # elevate privileges if needed

        try:
            if verbose:
                print("Deleting child of directory at path (" + child + ", " + path + ")!")
            subprocess.run(filesystem_rm_cmd, capture_output = not verbose)
        except Exception as e:
            print(  str(e) + "\nERROR!: Something happened while trying to delete part of the Arch Linux chroot filesystem (" + child + ", " + path + ")!\n" +
                    "Try using the `-v` option for more information.", ' ', '\n', file = sys.stderr)
            sys.exit(5) # deletion of part of the chroot filesystem was interrupted; exit with code 5
        
        child_index += 1

    if not verbose:
        os.system("clear")
    print("Deleting Arch Linux chroot filesystem (" + path + ")... [" + str(len(listdir_results)) + "/" + str(len(listdir_results)) + "]")

    filesystem_rm_cmd = ["rm", "-rf", path]
    if not getpass.getuser() == "root":
        filesystem_rm_cmd.insert(0, "sudo") # elevate privileges if needed

    try:
        subprocess.run(filesystem_rm_cmd, capture_output = not verbose)
    except Exception as e:
        print(  str(e) + "\nERROR!: Something happened while trying to delete the root directory of the Arch Linux chroot filesystem (" + path + ")!\n" +
                "Try using the `-v` option for more information.", ' ', '\n', file = sys.stderr)
        sys.exit(6) # deletion of the root directory of the chroot filesystem was interrupted; exit with code 6


# Ensure chroot filesystem was deleted.
if os.path.isdir(path):
    print(  "ERROR!: Failed to delete the Arch Linux chroot filesystem (" + path + ")!\n" +
            "Try manually deleting the directory using `rm`.\n" +
            "Use `rm --help` or `man rm` for more information.", ' ', '\n', file = sys.stderr)
    sys.exit(7) # failed to delete chroot filesystem; exit with code 7


if not verbose:
    os.system("clear")
print("Finished deleting Arch Linux chroot filesystem (" + path + ")!\n\nDone!")
