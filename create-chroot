#!/usr/bin/env python
# File: create-chroot
# Author: Nicholas Girga
# Purpose: Create a filesystem to be used by chroot or similar utilities.


# Imports
import depchecker.depchecker as depchecker
import getpass, os, sys, subprocess


# The packages to install in a chroot by default.
# Represented by a string separated by spaces.
# For example: "linux bash coreutils"
DEFAULT_PACKAGES = "linux bash coreutils sed vi vim perl pacman sudo curl"


# The path to this chroot.
path = ""


# The packages to install in this chroot.
# Represented by a string separated by spaces.
# For example: "linux bash coreutils"
packages = ""


# If extra information should be printed.
verbose = False


# If files and directories at the path should be deleted.
force_delete = False


# Prints help text.
def print_help():
    print("\nUsage: `create-chroot [options...] [path]`")
    print("\nOptions [options...]:")
    print("  -h, --help\t\tPrints help text.")
    print("  -v, --verbose\t\tEnables verbose mode.")
    print("  --force\t\tOverwrites files and directories at [path].")
    print("  -p=[packages]\t\tInstalls [packages] to the chroot.")
    print("  --packages=[packages]\t(Does the same as `-p`).")
    print("\nPackages should be between quotation marks, separated by space.")
    print("For example: `-p=\"linux bash coreutils\"`")
    print("If packages are left undefined, the default set of packages will be used.")
    print("Default packages: \"" + DEFAULT_PACKAGES + "\"")
    print("\nIf [path] is left empty, `$PWD/arch-fs` will be used as the path.\n")


# Prints version text.
def print_version():
    print("\nArch Chroot Utilities (create-chroot)")
    print("by Nicholas Girga")
    print("Released under the MIT license with ABSOLUTELY NO WARRANTY")
    print("\nVersion 1.1\n")


# Creates an empty file at the specified path with root privileges if needed.
def touch_file(path: str, verbose: bool):
    write_cmd = ["touch", path]
    if not getpass.getuser() == "root":
        write_cmd.insert(0, "sudo")

    try:
        subprocess.run(write_cmd, capture_output = not verbose)
    except Exception as e:
        print(str(e) + "\nERROR!: Something happened while trying to touch file (" + path + ")!", ' ', '\n', file = sys.stderr)
        sys.exit(8) # touch interrupted; exit with code 8


# Check for script dependencies.
depchecker.check_dependencies({
    "mkarchroot": { depchecker.SystemInfo.ARCH_LINUX: "devtools" } # check for `mkarchroot`
}, verbose)


# Check launch options.
args = sys.argv[1:]
for arg in args:
    if not path == "":
        print(  "ERROR!: Invalid syntax (" + arg + ")!\n" +
                "Options must come before path.\n" +
                "Use `create-chroot --help` for more information.", ' ', '\n', file=sys.stderr)
        sys.exit(6) # path before arguments; exit with code 6

    if len(arg) > 0:
        if arg[0] == '-':
            # is an option
            if len(arg) > 1:
                if arg[1] == '-':
                    # is double dash (word) option (e.g. `--help`)
                    if arg == "--help":
                        print_help() # help
                        sys.exit(0)
                    elif arg == "--verbose":
                        print(  "WARNING!: Verbose mode is enabled!\n" +
                                "Extra information will be given.")
                        verbose = True # enable verbose mode
                    elif arg == "--version":
                        print_version() # version
                        sys.exit(0)
                    elif arg == "--force":
                        print(  "WARNING!: Force deletion is enabled!\n" +
                                "Files and directories at the filesystem's path will be overwritten!")
                        force_delete = True # enable force deletion
                    elif arg[:10] == "--packages":
                        if len(arg) > 10:
                            if arg[10] == '=':
                                packages = arg[11:]
                            else:
                                print(  "ERROR!: Invalid syntax (" + arg + ")!\n" +
                                        "Expected \"=\", but got \"" + arg[10] + "\"!\n" +
                                        "Use `create-chroot --help` for more information.", ' ', '\n', file = sys.stderr)
                                sys.exit(7) # invalid package syntax; exit with code 7
                        else:
                            print(  "ERROR!: Invalid syntax (" + arg + ")!\n" +
                                    "The `--packages` option expects a variable.\n" +
                                    "Use `create-chroot --help` for more information.", ' ', '\n', file = sys.stderr)
                            sys.exit(7) # invalid package syntax; exit with code 7
                    else:
                        print(  "ERROR!: Invalid option (" + arg + ")!\n" +
                                "Use `create-chroot --help` for more information.", ' ', '\n', file = sys.stderr)
                        sys.exit(1) # invalid option; exit with code 1
                else:
                    # is single dash/char option (e.g. `-v`)
                    for char in arg[1:]:
                        if char == 'h':
                            print_help() # help
                            sys.exit(0)
                        elif char == 'v':
                            print(  "WARNING!: Verbose mode is enabled!" +
                                    "Extra information will be given.")
                            verbose = True # enable verbose mode
                        elif char == 'p':
                            if len(arg) > 2:
                                if arg[2] == '=':
                                    packages = arg[3:] # set packages
                                    break # stop reading this group of options if it contains a package list
                                else:
                                    print(  "ERROR!: Invalid syntax (" + arg + ")!\n" +
                                            "Expected \"=\", but got \"" + arg[2] + "\"!\n" +
                                            "Use `create-chroot --help` for more information.", ' ', '\n', file = sys.stderr)
                                    sys.exit(7) # invalid package syntax; exit with code 7
                            else:
                                print(  "ERROR!: Invalid syntax (" + arg + ")!\n" +
                                        "The `-p` option expects a variable.\n" +
                                        "Use `create-chroot --help` for more information.", ' ', '\n', file = sys.stderr)
                                sys.exit(7) # invalid package syntax; exit with code 7
                        else:
                            print(  "ERROR!: Invalid option (-" + char + ")!\n" +
                                    "Use `create-chroot --help` for more information.", ' ', '\n', file = sys.stderr)
                            sys.exit(1) # invalid option; exit with code 1
            else:
                print(  "ERROR!: Invalid syntax (" + arg + ")!\n" +
                        "Use `create-chroot --help` for more information.", ' ', '\n', file = sys.stderr)
                sys.exit(2) # invalid syntax (-); exit with code 2
        else:
            # is a path
            path = arg
    else:
        print("ERROR!: Option has invalid character length (" + arg + ")!", ' ', '\n', file = sys.stderr)
        sys.exit(3) # invalid launch option character length; exit with code 3


# Set default path if needed.
if path == "":
    new_path = os.path.realpath(os.getcwd() + "/arch-fs")
    if verbose:
        print("WARNING!: No path specified! Using default path (" + new_path + ")!")
    path = new_path
else:
    path = os.path.realpath(path) # get full path


# Print current path (verbose).
if verbose:
    print("Path: \"" + path + "\"")


# Set default packages if needed.
if packages == "":
    if verbose:
        print("WARNING!: No packages specified! Using default packages!")
    packages = DEFAULT_PACKAGES


# Print current package list (verbose).
if verbose:
    print("Package list: [ " + ", ".join(packages.split(' ')) + " ]")


# Do not allow creation if filesystem directory already exists.
is_file = os.path.isfile(path)
is_dir = os.path.isdir(path)
if is_file or is_dir:
    if not force_delete:
        print(  "ERROR!: " + ("File" if is_file else "Directory") + " exists at path (" + path + ")!\n" +
                "Use the `--force` option to delete it before creation.")
        sys.exit(4) # file or directory exists at path; exit with code 4

    print("WARNING!: Overwriting " + ("file" if is_file else "directory") + " at path!")

    if verbose:
        print("Deleting " + ("file" if is_file else "directory") + " at path (" + path + ")...")
    
    try:
        subprocess.run(["./delete-chroot", path]) # overwrite
    except Exception as e:
        print(str(e) + "\nERROR!: Something happened while trying to delete the Arch Linux chroot filesystem!")
        sys.exit(5) # failed to delete chroot filesystem; exit with code 5

    if verbose:
        print("Finished deleting " + ("file" if is_file else "directory") + " at path (" + path + ")!")


# Get package list.
package_list = packages.split(' ')


# Use mkarchroot to create a chroot filesystem.
print("Creating new Arch Linux chroot filesystem" + ((" (" + path + ")...") if verbose else "..."))

id_file = path + "/.chroot"
interrupt_file = path + "/.interrupt"
try:
    output = subprocess.run(["mkarchroot", path] + package_list, capture_output = not verbose) # create new arch root filesystem at ./arch-fs
    if output.returncode != 0 and output.returncode != 4:
        print(  "WARNING!: Returned with non-zero error code (" + str(output.returncode) + ")!\n" +
                "If problems occur, try recreating the filesystem with the `-v` option for more information.")
except KeyboardInterrupt:
    touch_file(id_file, verbose)
    touch_file(interrupt_file, verbose)
    print("(Keyboard interrupt) Quitting...")
    sys.exit(0) # KeyboardInterrupt; exit with code 0
except Exception as e:
    touch_file(id_file, verbose)
    touch_file(interrupt_file, verbose)
    print(str(e) + "\nERROR!: Something happened while creating the Arch Linux chroot filesystem (" + path + ")!")
    sys.exit(9) # `mkarchroot` interrupted; exit with code 9


# Create id file after success.
touch_file(id_file, verbose)


# Print finish text.
print("Finished creating new Arch Linux chroot filesystem" + ((" (" + path + ")!") if verbose else "!") + "\n\nDone!\n")
