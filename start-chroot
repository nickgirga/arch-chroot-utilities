#!/usr/bin/env python
# File: start-chroot
# Author: Nicholas Girga
# Purpose: Use `arch-chroot` on a filesystem created with `create-chroot`.


# Imports
import depchecker.depchecker as depchecker
import getpass, os, subprocess, sys


# The path to the chroot filesystem.
path = ""

# If extra information should be printed.
verbose = False


# Prints help text.
def print_help():
    print("\nUsage: `start-chroot [options...] [path]`")
    print("\nOptions:")
    print("  -h, --help\t\tPrints help text.")
    print("  -v, --verbose\t\tEnable verbose mode.")
    print("\nIf [path] is left empty, `$PWD/arch-fs` will be used as the path.\n")

# Check launch options.
args = sys.argv[1:]
for arg in args:
    if not path == "":
        print(  "ERROR!: Invalid syntax (" + arg + ")!\n" +
                "Options must come before path.\n" +
                "Use `start-chroot --help` for more information.", ' ', '\n', file = sys.stderr)
        sys.exit(6) # path before arguments; exit with code 6

    if len(arg) > 0:
        if arg[0] == '-':
            # is an option
            if len(arg) > 1:
                if arg[1] == '-':
                    # is double dash (word) option (e.g. `--help`)
                    if arg == "--help":
                        print_help() # help
                        sys.exit(0)
                    elif arg == "--verbose":
                        print()
                        verbose = True # enable verbose mode
                    else:
                        print(  "ERROR!: Invalid option (" + arg + ")!\n" +
                                "Use `start-chroot --help` for more information.", ' ', '\n', file = sys.stderr)
                        sys.exit(7) # invalid option; exit with code 7
                else:
                    # is single dash/char option (e.g. `-v`)
                    for char in arg[1:]:
                        if char == 'h':
                            print_help() # help
                            sys.exit(0)
                        elif char == 'v':
                            print()
                            verbose = True # enable verbose mode
                        else:
                            print(  "ERROR!: Invalid option (" + arg + ")!\n" +
                                    "Use `start-chroot --help` for more information.", ' ', '\n', file = sys.stderr)
                            sys.exit(7) # invalid option; exit with code 7
            else:
                print(  "ERROR!: Invalid syntax (" + arg + ")!\n" +
                        "Use `start-chroot --help` for more information.", ' ', '\n', file = sys.stderr)
                sys.exit(8) # invalid syntax (-); exit with code 8
        else:
            # is a path
            path = arg
    else:
        print("ERROR!: Option has invalid character length (" + arg + ")!", ' ', '\n', file = sys.stderr)
        sys.exit(9) # invalid launch option character length; exit with code 3


# Check for script dependencies.
depchecker.check_dependencies({
    "mount": { depchecker.SystemInfo.DEFAULT: "util-linux" },                       # check for `mount`
    "mountpoint": { depchecker.SystemInfo.DEFAULT: "util-linux" },                  # check for `mountpoint`
    "arch-chroot": { depchecker.SystemInfo.ARCH_LINUX: "arch-install-scripts" },    # check for `arch-chroot`
    "umount": { depchecker.SystemInfo.DEFAULT: "util-linux" },                      # check for `umount`
    "sudo": { depchecker.SystemInfo.DEFAULT: "sudo" }                               # check for `sudo`
}, verbose)


# Set default path if needed.
if path == "":
    new_path = os.getcwd() + "/arch-fs"
    if verbose:
        print("WARNING!: No path specified! Using default path (" + new_path + ")!")
    path = new_path


# Check if filesystem exists.
is_file = os.path.isfile(path)
is_dir = os.path.isdir(path)
if not (is_file or is_dir):
    print(  "ERROR!: The specified path does not exist (" + path + ")!\n" +
            "Use `./create-chroot` to create a new filesystem.", ' ', '\n', file = sys.stderr)
    sys.exit(1) # no file/directory at path; exit with code 1


# Mount filesystem.
if verbose:
    print("Mounting the filesystem (" + path + ")...")
mount_cmd = ["mount", "--bind", path, path]
if not getpass.getuser() == "root":
    mount_cmd.insert(0, "sudo") # elevate privileges if needed
try:
    subprocess.run(mount_cmd, capture_output = not verbose)
except Exception as e:
    print(  str(e) + "\nERROR!: Something happened while trying to mount the filesystem (" + path + ")!\n" +
            "Try using the `-v` option to see more information.", ' ', '\n', file = sys.sdterr)
    sys.exit(2) # mount was interrupted; exit with code 2


# Check if filesystem is mounted.
if subprocess.run(["mountpoint", "-q", path], capture_output = not verbose).returncode != 0:
    print(  "ERROR!: Filesystem was not mounted (" + path + ")!\n" +
            "Try manually mounting using `mount`.\n" +
            "Use `mount --help` or `man mount` for more information.", ' ', '\n', file = sys.sdterr)
    sys.exit(3) # mount failed; exit with code 3
if verbose:
    print("Finished mounting filesystem (" + path + ")!\n")


# Start chroot using `arch-chroot`.
print("Starting Arch Linux chroot" + ((" (" + path + ")...") if verbose else "..."))
chroot_cmd = ["arch-chroot", path]
if not getpass.getuser() == "root":
    chroot_cmd.insert(0, "sudo") # elevate privileges if needed
output = subprocess.run(chroot_cmd)
if output.returncode != 0 and output.returncode != 1:
    print("WARNING!: Chroot returned with a non-zero error code (" + str(output.returncode) + ")!")
print("Arch Linux chroot exited" + ((" (" + path + ")!") if verbose else "!\n\nDone!"))


# Unmount filesystem after chroot has exited.
if verbose:
    print("\nUnmounting the filesystem (" + path + ")...")
unmount_cmd = ["umount", path]
if not getpass.getuser() == "root":
    unmount_cmd.insert(0, "sudo") # elevate privileges if needed
try:
    subprocess.run(unmount_cmd, capture_output = not verbose)
except Exception as e:
    print(str(e) + "\nERROR!: Something happened while trying to unmount the filesystem (" + path + ")!\n" +
            "Try manually unmounting using `umount`.\n" +
            "Use `umount --help` or `man umount` for more information.", ' ', '\n', file = sys.sdterr)
    sys.exit(4) # unmount was interrupted; exit with code 4


# Check if filesystem has unmounted.
if subprocess.run(["mountpoint", "-q", path], capture_output = not verbose).returncode == 0:
    print(  "ERROR!: Filesystem was not unmounted (" + path + ")!\n" +
            "Try manually unmounting using `umount`.\n" +
            "Use `umount --help` or `man umount` for more information.", ' ', '\n', file = sys.sdterr)
    sys.exit(5) # unmount failed; exit with code 5
if verbose:
    print("Finished unmounting filesystem (" + path + ")!\n\nDone!")
